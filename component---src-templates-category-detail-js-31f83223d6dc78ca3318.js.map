{"version":3,"file":"component---src-templates-category-detail-js-31f83223d6dc78ca3318.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/components/Footer.js","webpack://gatsby-starter-hello-world/./src/components/Header.js","webpack://gatsby-starter-hello-world/./src/templates/category-detail.js"],"sourcesContent":["// src/components/Footer.js\nimport React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>&copy; {new Date().getFullYear()} My Blog. All rights reserved.</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst Header = () => {\n  return (\n    <header className=\"site-header site-header-custom\">\n      <nav className=\"navbar navbar-custom\">\n        <div className=\"container\">\n          <div className=\"row\" style={{ width: \"100%\", display:\"flex\"}}>\n            <div className=\"col-md-6\">\n              <Link to=\"/\">\n                {/* Use the static logo image URL here */}\n                <img\n                  src=\"/images/logo.svg\"// Replace with the actual path to your static logo\n                  alt=\"Site Logo\"\n                  style={{ width: \"250px\", height: \"auto\", marginBottom: \"0\" }}\n                />\n              </Link>\n            </div>\n            <div className=\"col-md-6\" style={{textAlign: 'right'}}>\n              <form action=\"/search\" method=\"GET\">\n                <input\n                  type=\"text\"\n                  name=\"query\"\n                  placeholder=\"Search for posts...\"\n                  required\n                />\n                <button type=\"submit\">Search</button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;","import React from \"react\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport { graphql, Link } from \"gatsby\";\n\nconst CategoryDetail = ({ data, pageContext }) => {\n  const categories = data.allWpCategory.nodes;\n  const posts = data.allWpPost.nodes;\n  const { categorySlug, categoryName, currentPage, numPages } = pageContext;\n\n  // Helper function to create pagination with ellipses\n  const getPagination = () => {\n    const pageNumbers = [];\n    const delta = 1; // Number of pages to show around the current page\n\n    for (let i = 1; i <= numPages; i++) {\n      if (\n        i === 1 || // First page\n        i === numPages || // Last page\n        i === currentPage || // Current page\n        (i >= currentPage - delta && i <= currentPage + delta) // Pages around current page\n      ) {\n        pageNumbers.push(i);\n      } else if (i === currentPage - delta - 1 || i === currentPage + delta + 1) {\n        // Add ellipsis between distant pages\n        pageNumbers.push(\"...\");\n      }\n    }\n\n    return pageNumbers;\n  };\n\n\n  // Helper function to calculate reading time\n  const calculateReadingTime = (content) => {\n    const wordsPerMinute = 200; // Average reading speed\n    const textLength = content.split(' ').length;\n    const time = Math.ceil(textLength / wordsPerMinute);\n    return time;\n  };\n\n  // Function to format date\n  const formatDate = (date) => {\n    const options = { year: 'numeric', month: 'short', day: 'numeric' };\n    return new Date(date).toLocaleDateString('en-US', options);\n  };\n\n  return (\n    <div>\n      <Header />\n      <section>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <div className=\"home-hero-section\">\n                <h1>{categoryName}</h1>\n                <p>Find expert articles on Magento, Shopify, and Digital Marketing topics</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            {/* Categories List */}\n            <div className=\"categories mb-4\">\n              <ul className=\"category-list-hero list-inline text-center\">\n                <li className=\"list-inline-item\">\n                  <Link\n                    to=\"/\"\n                    className={`btn btn-category-link ${!categorySlug ? \"active\" : \"\"}`}\n                  >\n                    All\n                  </Link>\n                </li>\n                {categories\n                  .filter((category) => category.name !== \"Uncategorized\")\n                  .map((category) => (\n                    <li key={category.id} className=\"list-inline-item\">\n                      <Link\n                        to={`/category/${category.slug}/`}\n                        className={`btn btn-category-link ${category.slug === categorySlug ? \"active\" : \"\"}`}\n                      >\n                        {category.name}\n                      </Link>\n                    </li>\n                  ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container blog-list-main-container\">\n        {/* Post List */}\n        <div className=\"row\">\n          {posts.map((post) => {\n            // Get the post's author details\n            return (\n              <div\n                key={post.id}\n                className=\"col-md-6 mb-4 blog-list-content-wrapper\"\n              >\n                <h3>\n                  <Link to={`/${post.slug}`}>\n                    {post.title}\n                  </Link>\n                </h3>\n                <div dangerouslySetInnerHTML={{ __html: post.excerpt.replace(/<a[^>]*class=\"read-more\"[^>]*>.*?<\\/a>/, \"\") }} />\n                  <div className=\"listing-blog-info\">\n                    <span>\n                      By <Link to={`/author/${post.author.node.slug}`}>{post.author.node.name}</Link>\n                    </span>\n                    <span>\n                      {\" | \"}{formatDate(post.date)} \n                    </span>\n                    <span>\n                      {\" | \"}{calculateReadingTime(post.excerpt)} min read\n                    </span>\n                  </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      <div className=\"container blog-pagination-main-container\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            {/* Pagination with Ellipsis */}\n            <div className=\"pagination\">\n              {getPagination().map((page, index) => {\n                if (page === \"...\") {\n                  return <span key={index} className=\"page-ellipsis\">...</span>;\n                }\n                return (\n                  <Link\n                    key={page}\n                    to={\n                      page === 1\n                        ? `/category/${categorySlug}/`\n                        : `/category/${categorySlug}/${page}`\n                    }\n                    className={`page-number ${currentPage === page ? \"active\" : \"\"}`}\n                  >\n                    {page}\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport const query = graphql`\n  query ($categorySlug: String!, $skip: Int!, $limit: Int!) {\n    allWpCategory {\n      nodes {\n        id\n        name\n        slug\n      }\n    }\n    allWpPost(\n      filter: {\n        categories: { nodes: { elemMatch: { slug: { eq: $categorySlug } } } }\n      }\n      sort: { fields: date, order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        id\n        title\n        slug\n        excerpt\n        content\n        date\n        author {\n          node {\n            name\n            slug\n            avatar {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryDetail;\n"],"names":["Date","getFullYear","className","style","width","display","to","src","alt","height","marginBottom","textAlign","action","method","type","name","placeholder","required","data","pageContext","categories","allWpCategory","nodes","posts","allWpPost","categorySlug","categoryName","currentPage","numPages","filter","category","map","key","id","slug","post","title","dangerouslySetInnerHTML","__html","excerpt","replace","author","node","date","toLocaleDateString","year","month","day","content","textLength","split","length","Math","ceil","calculateReadingTime","pageNumbers","i","push","getPagination","page","index"],"sourceRoot":""}